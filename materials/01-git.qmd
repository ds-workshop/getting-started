---
format:
  revealjs:
    slide-number: c/t
    width: 1600
    height: 900
    css: ["theme/theme.css"]
    theme: simple
    highlight-style: github
    code-block-border-left: "#4f6952"
    code-block-bg: true
    code-link: true
    chalkboard: true
editor: source
---

# Getting to Know <br> Git and GitHub {
background-image="images/dont_panic.png" 
background-size="contain" 
background-position="right" 
background-color="black"
background-opacity=0.75}

## The Problem

::: {.incremental}

Consider the following situations:

- We've been working on a project for ages. We've gone through about 30 different iterations of writing a script and keep going back and forth on which approach we want to keep. We have multiple different versions of the script saved just so we can refer back to the different approaches we like and keep a record of how it's changed the results.

- We made a change to one of the core functions of our project and everything seemed to. be great. But two weeks later we discovered changing a helper function broke something in our monthly report. We're now trying to figure out what we changed and how to patch it, so we're digging through our old files to see if we can just go back to the piece we needed from functions_v1.R.

- Someone recently mentioned that lightgbm + linear trees offers a really nice improvement in both training time and performance over XGBoost. They want to test it in our project, and then evaluate whether this should become the new model. 

:::

## Version Control

For each one of these scenarios, we intuitively wanted something resembling version control. We want to tinker with making a change, but we don't want that change to break the code. 

. . .

[So we make a copy of the original, then create a new copy that we begin to edit and work on without breaking the original source.]{.fragment .highlight-red}

. . .

We've all probably come up with some version of crazy, half-baked version syntax to control the various versions of projects/files. 

. . . 


## So why Git?

. . .

If you're like me, at some point you thought to yourself, maybe I could be that guy who uses Git and talks about **commits** and **pull requests** and really knows what he's doing with dev vs prod environments rather than just putting **\_dev** and **\_test** at the end of important files.

. . . 

I'm going to *improve*.

. . .

I'm going to be more than I've ever been.

. . .

I'm going to use Git.

. . .


##

{{< video https://youtu.be/x_CNqKA2t9M?si=gFjkE4VeObGw_TK2&t=136 width = "640" aspect-ratio="16x9">}}

##

And about thirty minutes later it was so unclear how any of this would help you that you just punted and decided to keep working as you always have, warts and all, because Git clearly comes from The Bad Place.

. . .

## The Reality

So many of the frustrations with writing code, making changes, have been solved. 

. . .

There's a reason Git is used everywhere. It is the life jacket in a sea of stashing files everywhere with poor naming conventions and no lineage or history.

. . .


You have to learn how to use Git.

. . .


[It's going to be painful.]{style="font-size: 80px;"}


. . .



[But it's worth it.]{style="font-size: 100px;"}


## Why should we commit to this?

. . .

From [Excuse Me, Do You Have a Moment to Talk About Version Control by Jennifer Bryan:](https://www.tandfonline.com/doi/full/10.1080/00031305.2017.1399928)

. . .

> Why would a statistician use a version control system, such as Git? And what is the point of hosting your work online, e.g., on GitHub? Could the gains possibly justify the inevitable pain?
**I say yes, with the zeal of the converted.**

. . .

> Doing your work becomes tightly integrated with organizing, recording, and disseminating it. It’s not a separate, burdensome task you are tempted to neglect.

. . .

> Collaboration is much more structured, with powerful tools for asynchronous work and managing versions.

. . .

> By using common mechanics across work modes (research, teaching, analysis), you achieve basic competence quickly and avoid the demoralizing forget-relearn cycle.

. . .

## 

. . .

Despite this zeal, she does make an important note:

. . .

> Now the bad news: Git was built neither for the exact usage described here, nor for broad usability. You will undoubtedly notice this, so it’s best to know in advance.

. . .

Git was not designed for data science projects. This will at times create slightly wonky implementations and workarounds that feel frustrating. 

. . .

Those DevOps folks will, once again, laugh at us.

## Dear Evan Hansen redux

# What We Need to Know About Git

## So, what the heck is Git?

## Git Terms

:::: {.columns}

::: {.column width="40%"}

:::{.fragment fragment-index=1}
- Repository: A directory in which file history is preserved
:::

:::{.fragment fragment-index=2}
- Clone: Downloading an existing repository
:::

:::

::: {.column width="50%"}

::: {.fragment fragment-index=1}
![](images/git-repository.png){fig-align="center"}
:::

::: {.fragment fragment-index=2}
![](images/git-clone.png){fig-align="center"}
:::
:::
::::

## Next Steps

- Local: “on your personal machine”
- Remote: “on the official server”
- Branch: A version of the directory
- Commit: A change made to a version of the directory
- Push: Uploads your work to the ‘official’ remote server
- Fetch/Pull: Checks for available updates on a remote
- Switch/Checkout: Switches your local copy to a version of the directory
- Pull Request: A request to merge one branch into another


## Demo

- Cloning a repo
- Viewing repo organization
- Fetch/pull
- 
Cloning
Updating submodules
Repo log
Working tree changes
Fetch / Pull
SHAs
Ref browser
Comparing between branches / commits
Switching between branches / commits

##

```{mermaid}
graph TD;

A[Remote Repo] --> B[Local Repo]



```

##

```{mermaid}
graph TD;

    A[Main Branch] --> B1[Jim's Feature Branch]
    A --> B2[Phil's Feature Branch]
    B1 --> C1{Work on Feature}
    B2 --> C2{Work on Feature}
    C1 --> D1[Commit Changes]
    C2 --> D2[Commit Changes]
    D1 --> E1[Push Changes to Jim's Feature Branch]
    D2 --> E2[Push Changes to Phil's Feature Branch]
    E1 --> F1[Create Pull Request]
    E2 --> F2[Create Pull Request]
    F1 --> G1[Review Code]
    F2 --> G2[Review Code]
    G1 --> H1[Approve Changes]
    G2 --> H2[Approve Changes]
    H1 --> I1[Merge Pull Request]
    H2 --> I2[Merge Pull Request]
    I1 --> J1[Delete Jim's Feature Branch]
    I2 --> J2[Delete Phil's Feature Branch]

```